server:
  port: 9000


spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      # 路由规则
      # 1. url发现
      routes:
        - id: service-consumer #路由唯一id
          uri: http://localhost:9080/ #目标 URL，路由到微服务的地址
          predicates:                 #断言
            - Path=/order/**        # path 规则： 匹配对应 URL 的请求，将匹配到的请求追加到目标 URL 之后
#            - Query=token        # query 规则： 匹配请求参数中包含 token
#            - Query=token,abc.        # query 规则： 匹配请求参数中包含 token 并且其参数值满足正则表达式 abc, 的请求
#            - Method=GET          # 匹配任意 GET 请求
#            - After=2022-04-11T20:20:20.000+08:00[Asia/Shanghai] # 在此时间之后可以请求
#            - RemoteAddr=10.0.9.87/0 # 匹配远程地址请求是 RemoteAddr 的请求，0 表示子网掩码
#            - Header=X-Request-Id, \d+ # 匹配请求头包含 X-Request-Id 并且其值匹配正则表达式 \d+ 的请求


        - id: serviceGatewayProvider #路由唯一id
          uri: lb://serviceGatewayProvider # 动态路由，根据服务名称从注册中心获取服务请求地址
          predicates:                 #断言
            - Path=/product/**, /api-gateway/**, /**       # path 规则： 匹配对应 URL 的请求，将匹配到的请求追加到目标 URL 之后

          #-------- 网关过滤器 ------------------------------
          # G-1-1 、Path RewritePath 方式
#          predicates:
#            - Path=/product/**, /api-gateway/**
#          filters:
#            - RewritePath=/api-gateway(?<segment>/?.*), $\{segment} # 将 /api-gateway/product/1 重写为 /product/1

          # G-1-2 、Path PrefixPath 方式
#          predicates:
#            - Path=/product/**
#          filters:
#            - PrefixPath=/product # 将 /1 重写为 /product/1

          # G-1-3 、Path StripPrefix 方式
#          predicates:
#            - Path=/**
#          filters:
#            - StripPrefix=2 # 将 /api/123/product/1 重写为 /product/1

          # G-1-4 、Path SetPath 方式
#          predicates:
#            - Path=/api/product/{segment}
#          filters:
#            - SetPath=/product/{segment} # 将 /api/product/1 重写为 /product/1

          # G-2-1 、Parameter  方式
#          predicates:
#            - Path=/api-gateway/**
#          filters:
#            - RewritePath=/api-gateway(?<segment>/?.*), $\{segment} # 将 /api-gateway/product/1 重写为 /product/1
#            - AddRequestParameter=flag, 1 # 在下游请求中添加 flag = 1

          # G-3-1 、Status  方式
#          predicates:
#            - Path=/api-gateway/**
#          filters:
#            - RewritePath=/api-gateway(?<segment>/?.*), $\{segment} # 将 /api-gateway/product/1 重写为 /product/1
#            - SetStatus=404 # 404 或者对应的枚举 NOT_FOUND

      # 2.服务名称转发
#      discovery:
#        locator:
#          # 是否与服务发现组件进行结合，通过 serviceId 转发到具体服务实例
#          enabled: true   # 是否开启基于微服务发现的路由规则
#          lower-case-service-id: true  # 是否将服务名称转为小写


# 配置 eureka server 注册中心
eureka:
  client:
    register-with-eureka: true #是否将自己注册到注册中心，默认为true
    registry-fetch-interval-seconds: 10 # 表示Eureka Client 间隔多久去服务器拉取注册信息，默认为30秒
    serviceUrl: #注册中心对外暴露的注册地址
      defaultZone: http://root:123456@localhost:8671/eureka/,http://root:123456@localhost:8672/eureka/

